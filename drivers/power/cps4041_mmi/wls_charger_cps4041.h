/*
 * Copyright © 2020, ConvenientPower
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 *
 */

#ifndef __WLS_CHARGER_CPS4041__
#define __WLS_CHARGER_CPS4041__
#include <linux/workqueue.h>
#include <linux/thermal.h>
#include <mtk_charger.h>
#include <moto_wlc.h>
#include "moto_wls_auth2.0.h"

#include <linux/power/moto_chg_tcmd.h>


enum mmi_mux_channel {
	MMI_MUX_CHANNEL_NONE = 0,
	MMI_MUX_CHANNEL_TYPEC_CHG,
	MMI_MUX_CHANNEL_TYPEC_OTG,
	MMI_MUX_CHANNEL_WLC_CHG,
	MMI_MUX_CHANNEL_WLC_OTG,
	MMI_MUX_CHANNEL_TYPEC_CHG_WLC_OTG,
	MMI_MUX_CHANNEL_TYPEC_CHG_WLC_CHG,
	MMI_MUX_CHANNEL_TYPEC_OTG_WLC_CHG,
	MMI_MUX_CHANNEL_TYPEC_OTG_WLC_OTG,
	MMI_MUX_CHANNEL_WLC_FW_UPDATE,
	MMI_MUX_CHANNEL_WLC_FACTORY_TEST,
#ifdef CONFIG_MOTO_CHANNEL_SWITCH
	MMI_MUX_CHANNEL_WLC_CHG_OTG,
	MMI_MUX_CHANNEL_WLC_CHG_OTG_WLC_OTG,
	MMI_MUX_CHANNEL_WLC_CHG_OTG_WLC_CHG,
#endif
	MMI_MUX_CHANNEL_MAX
};

struct mmi_mux_chan {
	enum mmi_mux_channel chan;
	bool on;
};


#define CPS_WLS_FAIL	-1
#define CPS_WLS_SUCCESS 0

#define BOOTLOADER_SIZE_MAX	0x800
#define FIRMWARE_SIZE_MAX	0x8000
/*****************************************************************************
 *	CMD REG
 ****************************************************************************/
#define ADDR_BUFFER0		0x20000F00
#define ADDR_BUFFER1		0x20001300
#define ADDR_CMD			0x200017F0
#define ADDR_FLAG			0x200017F4
#define ADDR_BUF_SIZE		0x200017F8
#define ADDR_FW_VER			0x2000180C

#define PGM_BUFFER0			0x10
#define PGM_BUFFER1			0x20
//#define PGM_BUFFER2			0x30
//#define PGM_BUFFER3			0x40

#define PGM_BUFFER0_1		0x50
#define PGM_ERASER_0		0x60
#define PGM_ERASER_1		0x70
#define PGM_WR_FLAG			0x80

#define CACL_CRC_APP		0x90
#define CACL_CRC_TEST		0xB0

#define PGM_ADDR_SET		0xC0

#define RUNNING				0x66
#define PASS				0x55
#define FAIL				0xAA
#define ILLEGAL				0x40

//****************system mode***************
#define SYS_MODE_BACK_POWER 1
#define SYS_MODE_TX			2
#define SYS_MODE_RX			3

/*rx中断定义*/
/*
#define RX_INT_POWER_ON                  (0x01<<0)
#define RX_INT_READY                          (0x01<<1)
#define RX_INT_LDO_OFF                       (0x01<<2)
#define RX_INT_LDO_ON                        (0x01<<3)
#define RX_INT_VDD_PD                         (0x01<<4)
#define RX_INT_HEAVY_LOAD                (0x01<<5)
#define RX_INT_LIGHT_LOAD                  (0x01<<6)
#define RX_INT_FSK_TIMEOUT               (0x01<<7)
#define RX_INT_FSK_PKT                        (0x01<<8)
#define RX_INT_VRECT_OVP                  (0x01<<9)
#define RX_INT_VRECT_OVP_TO             (0x01<<10)
#define RX_INT_VRECT_OVP_BVP            (0x01<<11)
#define RX_INT_CHIP_OTP                       (0x01<<12)
#define RX_INT_CHIP_HTP                      (0x01<<13)
#define RX_INT_MLDO_OCP                   (0x01<<14)
#define RX_INT_MLDO_HOCP                 (0x01<<15)
#define RX_INT_MLDO_SCP                    (0x01<<16)
#define RX_INT_MLDO_OPP                    (0x01<<17)
#define RX_INT_MLDO_UVP                    (0x01<<18)
#define RX_INT_MLDO_OVP                   (0x01<<19)
#define RX_INT_AC_LOSS                       (0x01<<20)
#define RX_INT_SR_OCP                         (0x01<<21)
#define RX_INT_SR_BR_SW_FAIL            (0x01<<22)
#define RX_INT_SR_BR_SW_SUCC          (0x01<<23)
#define RX_INT_SR_BR_F_T_H                (0x01<<24)
#define RX_INT_SR_BR_H_T_F                  (0x01<<25)
#define RX_INT_START_OV                      (0x01<<26)
#define RX_INT_HS_OK            (0X01 << 27)
#define RX_INT_HS_FAIL          (0X01 << 28)
#define RX_INT_FC_FAIL          (0X01 << 29)
#define RX_INT_NEGO_POWER_READY (0X01 << 30)
*/

#define RX_INT_POWER_ON                 (0x01 << 0)
#define RX_INT_READY                    (0x01 << 1)
#define RX_INT_LDO_OFF                  (0x01 << 2)
#define RX_INT_LDO_ON                   (0x01 << 3)
#define RX_INT_VDD_PG                   (0x01 << 4)
#define RX_INT_FSK_ACK                  (0x01 << 5)
#define RX_INT_PLA_ACK              (0x01 << 6)
#define RX_INT_FSK_TIMEOUT              (0x01 << 7)
#define RX_INT_FSK_PKT                  (0x01 << 8)
//#define RX_INT_EDS_RECEIVE                (0x01 << 9)
//#define RX_INT_EDS_SEND_FAIL             (0x01 << 10)
#define RX_INT_VRECT_OVP                (0x01 << 9)
#define RX_INT_VRECT_OVP_TO             (0x01 << 10)
#define RX_INT_VRECT_BVP            (0x01 << 11)
#define RX_INT_CHIP_OTP                 (0x01 << 12)
#define RX_INT_CHIP_HTP                 (0x01 << 13)
#define RX_INT_MLDO_OCP                 (0x01 << 14)
#define RX_INT_MLDO_HOCP                (0x01 << 15)
#define RX_INT_MLDO_SCP                 (0x01 << 16)
#define RX_INT_MLDO_OPP                 (0x01 << 17)
#define RX_INT_MLDO_UVP                 (0x01 << 18)
#define RX_INT_MLDO_OVP                 (0x01 << 19)
#define RX_INT_AC_LOSS                  (0x01 << 20)
#define RX_INT_SR_OCP                   (0x01 << 21)
#define RX_INT_SR_BR_SW_FAIL            (0x01 << 22)
#define RX_INT_SR_BR_SW_SUCC            (0x01 << 23)
#define RX_INT_FC_OK              (0x01 << 24)
//#define RX_INT_CLOAK_INT              (0x01 << 25)
//#define RX_INT_CLOAK_EXIT                 (0x01 << 26)
#define RX_INT_START_OV                 (0x01 << 26)
#define RX_INT_HS_OK                    (0x01 << 27)
#define RX_INT_HS_FAIL                  (0x01 << 28)
#define RX_INT_FC_FAIL                  (0x01 << 29)
#define RX_INT_NEGO_POWER_READY         (0x01 << 30)

/*rx命令定义*/
#define RX_CMD_SEND_ASK			(0x01<<0)
#define RX_CMD_RESERVE2			(0x01<<1)
#define RX_CMD_SEND_EPT			(0x01<<2)
#define RX_CMD_RESET_SYS		(0x01<<3)

/*tx中断定义*/
#define TX_INT_INIT_DONE             (0x01<<0)
#define TX_INT_PING                       (0x01<<1)
#define TX_INT_SSP                         (0x01<<2)
#define TX_INT_IDP                          (0x01<<3)
#define TX_INT_CFGP                      (0x01<<4)
#define TX_INT_ASK_PKT                (0x01<<5)
#define TX_INT_EPT                        (0x01<<6)
#define TX_INT_AC_DET                (0x01<<7)
#define TX_INT_HTP                      (0x01<<8)
#define TX_INT_BR_H_T_F            (0x01<<9)
#define TX_INT_BR_F_T_H            (0x01<<10)
#define TX_INT_LP_END                 (0x01<<11)

/*
#define TX_INT_PING				(0x01<<0)
#define TX_INT_SSP				(0x01<<1)
#define TX_INT_IDP				(0x01<<2)
#define TX_INT_CFGP				(0x01<<3)
#define TX_INT_ASK_PKT			(0x01<<4)
#define TX_INT_EPT				(0x01<<5)
#define TX_INT_RPP_TO			(0x01<<6)
#define TX_INT_CEP_TO			(0x01<<7)
#define TX_INT_AC_DET			(0x01<<8)
#define TX_INT_INIT				(0x01<<9)
#define TX_INT_ASK_ALL			(0x01<<10)
#define TX_INT_RPP_TYPE_ERR		(0x01<<11)
#define TX_INT_RP_ASK_ACK		(0x01<<12)
#define TX_INT_PING_OVP			(0x01<<13)
*/
/*tx命令定义*/
#define TX_CMD_CRC_CHECK              (0x01<<0)
#define TX_CMD_RESET_SYS                (0x01<<1)
#define TX_CMD_SEND_FSK                 (0x01<<2)
#define TX_CMD_ENTER_TX_MODE     (0x01<<3)
#define TX_CMD_ENTER_BP_MODE     (0x01<<4)
#define TX_CMD_ENTER_FULL_BR        (0x01<<5)
#define TX_CMD_ENTER_HALF_BR       (0x01<<6)
/*
#define TX_CMD_CRC_CHECK		(0x01<<0)
#define TX_CMD_ENTER_TX_MODE	(0x01<<1)
#define TX_CMD_EXIT_TX_MODE		(0x01<<2)
#define TX_CMD_SEND_FSK			(0x01<<3)
#define TX_CMD_RESET_SYS		(0x01<<4)
*/

/*tx功能定义*/
//#define TX_RESERVE1_EN			(0x01<<0)
//#define TX_FULL_BRI				(0x01<<1)
///#define TX_RESERVE2_EN			(0x01<<2)

/*tx EPT定义*/
#define EPT_VRECT_OVP                      (0x01<<14)
#define EPT_SR_OCP                            (0x01<<13)
#define EPT_Q_FOD                              (0x01<<12)
#define EPT_POCP                                (0x01<<11)
#define EPT_OTP                                  (0x01<<10)
#define EPT_FOD                                  (0x01<<9)
#define EPT_UVP                                  (0x01<<8)
#define EPT_OVP                                   (0x01<<7)
#define EPT_OCP                                  (0x01<<6)
#define EPT_RPP_TYPE_ERR                (0x01<<5)
#define EPT_RPP_TO                          (0x01<<4)
#define EPT_CEP_TO                          (0x01<<3)
#define EPT_RCV_EPT                        (0x01<<2)
#define EPT_SSP                                (0x01<<1)
#define EPT_WRONG_PACKET          (0x01<<0)
/*
#define EPT_VRECT_OVP			(0x01<<13)
#define EPT_SR_OCP				(0x01<<12)
#define EPT_POCP				(0x01<<11)
#define EPT_OTP					(0x01<<10)
#define EPT_FOD					(0x01<<9)
#define EPT_UVP					(0x01<<8)
#define EPT_OVP					(0x01<<7)
#define EPT_OCP					(0x01<<6)
#define EPT_RPP_TO				(0x01<<5)
#define EPT_CEP_TO				(0x01<<4)
//#define EPT_RCV_EPT				(0x01<<3)
//#define EPT_SSP					(0x01<<2)
#define EPT_RCV_EPT					(0x01<<3)
#define EPT_AC_DET				(0x01<<2)
#define EPT_POVP				(0x01<<1)
#define EPT_WRONG_PACKET		(0x01<<0)
*/
//#define AP_SYS_CONTROL_BASE_ADDR	0x20001D40
//#define AP_TX_CONFIG_BASE_ADDR	0x20001E00
//#define AP_TX_CONTROL_BASE_ADDR	0x20001E40
//#define AP_TX_REPORT_BASE_ADDR	0x20001E80
//#define AP_RX_CONFIG_BASE_ADDR	0x20001F00
//#define AP_RX_CONTROL_BASE_ADDR	0x20001F40
//#define AP_RX_REPORT_BASE_ADDR	0x20001F80
#define RX_FOD_GAIN_LEN 16
#define RX_FOD_CURR_LEN 7


#define _CPS_MASK(BITS, POS) \
	((unsigned char)(((1 <<	(BITS)) - 1) <<	(POS)))

#define CPS_MASK(LEFT_BIT_POS, RIGHT_BIT_POS) \
		_CPS_MASK((LEFT_BIT_POS) -	(RIGHT_BIT_POS) + 1, \
				(RIGHT_BIT_POS))

static uint32_t bpp_fod_array_w_folio[RX_FOD_GAIN_LEN] =
{80, 11, 80, 11, 80, 11, 80, 11, 80, 11, 80, 11, 80, 11, 80, 11};

static uint32_t epp_fod_array_w_folio[RX_FOD_GAIN_LEN] =
{120, 32, 120, 24, 120, 21, 120, 21, 120, 19, 120, 18, 120, 17, 120, 17};
/*****************************************************************************
 *	Log
 ****************************************************************************/
#define CPS_LOG_NONE	0
#define CPS_LOG_ERR		1
#define CPS_LOG_DEBG	2
#define CPS_LOG_FULL	3

#define ENABLE_CPS_LOG CPS_LOG_FULL

#define cps_wls_log(num, fmt, args...) \
	do { \
		if (ENABLE_CPS_LOG >= (int)num) \
			pr_err(fmt, ##args); \
	} while	(0)

/*-------------------------------------------------------------------*/
struct cps_wls_chrg_chip {
	struct i2c_client *client;
	struct device *dev;
	struct regmap *regmap;
	struct regmap *regmap32;
	char *name;
	struct power_supply *wl_psy;
	struct power_supply *batt_psy;
	struct power_supply *usb_psy;
	struct power_supply *dc_psy;
	struct power_supply_desc wl_psd;
	struct power_supply_config wl_psc;
	struct power_supply_desc batt_psd;
	struct power_supply_desc usb_psd;
	struct power_supply_desc dc_psd;
	struct pinctrl *cps_pinctrl;
	struct pinctrl_state *cps_gpio_active;
	struct pinctrl_state *cps_gpio_suspend;
	//struct wake_lock cps_wls_wake_lock;
	struct wakeup_source *cps_wls_wake_lock;
	struct mutex irq_lock;
	struct mutex i2c_lock;
	int state;
	int wls_charge_int;
	int cps_wls_irq;
	int reg_addr;
	int reg_data;
	int rx_ovp;
	int rx_ocp;
	int rx_opp;
	int rx_ht_thl;
	int rx_vout_target;
	int rx_ept_rsn;
	int rx_irect;
	int rx_vrect;
	int rx_vout;
	int rx_die_temp;
	int rx_ntc;
	int rx_neg_power;
	int rx_neg_protocol;
	int rx_fop;
	int rx_ept;
	int rx_ce;
	int rx_dietmp;
	int rx_vout_set;
	int rx_vout_threshold;
	int command_flag;
	bool rx_offset;
	int enable_rx_offset_detect;
	bool enable_rod;
	int rx_offset_detect_count;
	int rod_stop_battery_soc;
	ktime_t rx_start_ktime;
	bool rod_stop;

	unsigned long flags;
	int rx_ldo_on;
	int wls_online;
	int wls_det_int;
	int wls_det_irq;
	int otg_switch_en;
	const char *wls_fw_name;
	uint32_t wls_fw_version;
	/* alarm timer */
	struct alarm wls_rx_timer;
	struct timespec64 end_time;
	unsigned int rx_polling_ns;
	uint32_t tx_mode;
	uint32_t wls_input_curr_max;
	uint32_t folio_mode;
	bool rx_connected;
	struct moto_chg_tcmd_client wls_tcmd_client;
	struct moto_wls_chg_ops	wls_chg_ops;
	Sys_Op_Mode mode_type;
	Sys_Op_Mode qi_mode_type;
	uint32_t MaxV;
	uint32_t MaxI;
	uint32_t chip_id;
	bool factory_wls_en;
	int thermal_icl; /*mA*/
	int thermal_state;
	int thermal_wls_ccl; /*uA*/

	wait_queue_head_t	wait_que;
	bool wls_rx_check_thread_timeout;
	struct wakeup_source *rx_check_wakelock;
	struct workqueue_struct *wls_wq;
	struct delayed_work fw_update_work;
	struct delayed_work	bpp_icl_work;
	struct delayed_work	light_fan_work;
	struct delayed_work	offset_detect_work;
	struct delayed_work	dump_info_work;
	uint32_t bootmode;
	struct thermal_cooling_device *tcd;
	bool ntc_thermal;
	bool tx_ept_flag;
	bool fw_uploading;
	struct charger_device *chg1_dev;
	bool chip_state;
	bool rx_int_ready;
	bool bpp_icl_done;
	int wls_mode_select;
	int fan_speed;
	int light_level;
	int wlc_status;
	uint32_t wlc_tx_power;
	int cable_ready_wait_count;
	bool moto_stand;
	int enable_stop_epp;
	bool stop_epp_flag;
	ktime_t stop_epp_ktime;
	bool mode_select_force;
};

typedef enum ept_reason
{
	EPT_UNKONWN = 0,
	EPT_CC,
	EPT_IF,
	EPT_OT,
	EPT_OV,
	EPT_OC,
	EPT_BF,
	EPT_RES1,
	EPT_NP,
	EPT_RES2,
	EPT_NF,
	EPT_RS,
}ept_reason_e;

// CPS4041_BL_V0.2
const unsigned char CPS4041_BOOTLOADER[0x800] = {
	0x68, 0x0D, 0x00, 0x20, 0xD9, 0x05, 0x00, 0x20,
	0x41, 0x05, 0x00, 0x20, 0x6D, 0x01, 0x00, 0x20,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x45, 0x05, 0x00, 0x20,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x47, 0x05, 0x00, 0x20, 0x49, 0x05, 0x00, 0x20,
	0x4B, 0x05, 0x00, 0x20, 0x4B, 0x05, 0x00, 0x20,
	0x4B, 0x05, 0x00, 0x20, 0x4B, 0x05, 0x00, 0x20,
	0x4B, 0x05, 0x00, 0x20, 0x4B, 0x05, 0x00, 0x20,
	0x4B, 0x05, 0x00, 0x20, 0x4B, 0x05, 0x00, 0x20,
	0x4B, 0x05, 0x00, 0x20, 0x4B, 0x05, 0x00, 0x20,
	0x4B, 0x05, 0x00, 0x20, 0x4B, 0x05, 0x00, 0x20,
	0x4B, 0x05, 0x00, 0x20, 0x4B, 0x05, 0x00, 0x20,
	0x4B, 0x05, 0x00, 0x20, 0x4B, 0x05, 0x00, 0x20,
	0x4B, 0x05, 0x00, 0x20, 0x4B, 0x05, 0x00, 0x20,
	0x4B, 0x05, 0x00, 0x20, 0x4B, 0x05, 0x00, 0x20,
	0x4B, 0x05, 0x00, 0x20, 0x4B, 0x05, 0x00, 0x20,
	0x4B, 0x05, 0x00, 0x20, 0x4B, 0x05, 0x00, 0x20,
	0x4B, 0x05, 0x00, 0x20, 0x4B, 0x05, 0x00, 0x20,
	0x4B, 0x05, 0x00, 0x20, 0x4B, 0x05, 0x00, 0x20,
	0x4B, 0x05, 0x00, 0x20, 0x4B, 0x05, 0x00, 0x20,
	0x4B, 0x05, 0x00, 0x20, 0x4B, 0x05, 0x00, 0x20,
	0x1F, 0xB5, 0x1F, 0xBD, 0x00, 0x02, 0x00, 0x00,
	0x20, 0x06, 0x00, 0x00, 0x00, 0xF0, 0x02, 0xF8,
	0x00, 0xF0, 0x3C, 0xF8, 0x0C, 0xA0, 0x30, 0xC8,
	0x08, 0x38, 0x24, 0x18, 0x2D, 0x18, 0xA2, 0x46,
	0x67, 0x1E, 0xAB, 0x46, 0x54, 0x46, 0x5D, 0x46,
	0xAC, 0x42, 0x01, 0xD1, 0x00, 0xF0, 0x2E, 0xF8,
	0x7E, 0x46, 0x0F, 0x3E, 0x0F, 0xCC, 0xB6, 0x46,
	0x01, 0x26, 0x33, 0x42, 0x00, 0xD0, 0xFB, 0x1A,
	0xA2, 0x46, 0xAB, 0x46, 0x33, 0x43, 0x18, 0x47,
	0xEC, 0x04, 0x00, 0x00, 0x0C, 0x05, 0x00, 0x00,
	0x10, 0x3A, 0x02, 0xD3, 0x78, 0xC8, 0x78, 0xC1,
	0xFA, 0xD8, 0x52, 0x07, 0x01, 0xD3, 0x30, 0xC8,
	0x30, 0xC1, 0x01, 0xD5, 0x04, 0x68, 0x0C, 0x60,
	0x70, 0x47, 0x00, 0x00, 0x00, 0x23, 0x00, 0x24,
	0x00, 0x25, 0x00, 0x26, 0x10, 0x3A, 0x01, 0xD3,
	0x78, 0xC1, 0xFB, 0xD8, 0x52, 0x07, 0x00, 0xD3,
	0x30, 0xC1, 0x00, 0xD5, 0x0B, 0x60, 0x70, 0x47,
	0x10, 0xB5, 0x10, 0xBD, 0x00, 0xF0, 0x11, 0xFA,
	0x11, 0x46, 0xFF, 0xF7, 0xB5, 0xFF, 0x00, 0xF0,
	0xB0, 0xF9, 0x00, 0xF0, 0x29, 0xFA, 0x03, 0xB4,
	0xFF, 0xF7, 0xF2, 0xFF, 0x03, 0xBC, 0x00, 0xF0,
	0x2F, 0xFA, 0x00, 0x00, 0x00, 0xBF, 0xFE, 0xE7,
	0xDC, 0x48, 0x00, 0x68, 0x00, 0x28, 0x09, 0xD1,
	0x0B, 0x20, 0xDB, 0x49, 0xC8, 0x61, 0xDB, 0x48,
	0xD9, 0x49, 0xC0, 0x31, 0x88, 0x63, 0x01, 0x20,
	0xD6, 0x49, 0x08, 0x60, 0x70, 0x47, 0xD5, 0x48,
	0x00, 0x68, 0x01, 0x28, 0x0A, 0xD1, 0x03, 0x20,
	0xD3, 0x49, 0xC8, 0x61, 0x0B, 0x20, 0xC8, 0x61,
	0x00, 0x20, 0xD1, 0x49, 0xC0, 0x31, 0x88, 0x63,
	0xCE, 0x49, 0x08, 0x60, 0x70, 0x47, 0x30, 0xB5,
	0x02, 0x46, 0x00, 0x23, 0x00, 0x24, 0x21, 0x20,
	0x80, 0x02, 0x82, 0x42, 0x04, 0xDB, 0xCC, 0x48,
	0x82, 0x42, 0x01, 0xD0, 0x01, 0x20, 0x30, 0xBD,
	0xC7, 0x48, 0x82, 0x60, 0xC1, 0x60, 0x03, 0x20,
	0xC5, 0x4D, 0xE8, 0x61, 0x07, 0x20, 0xE8, 0x61,
	0xE8, 0x61, 0xE8, 0x61, 0xE8, 0x61, 0x03, 0x20,
	0xE8, 0x61, 0xC4, 0x4B, 0x0E, 0xE0, 0xC0, 0x48,
	0x00, 0x6A, 0x00, 0x28, 0x00, 0xD1, 0x0A, 0xE0,
	0x18, 0x46, 0x5B, 0x1E, 0x00, 0x28, 0x05, 0xD1,
	0x01, 0x20, 0xBB, 0x4D, 0xE8, 0x61, 0x03, 0x20,
	0xE8, 0x61, 0x01, 0x24, 0xEF, 0xE7, 0x00, 0xBF,
	0x0A, 0x23, 0x00, 0xBF, 0x18, 0x46, 0x5B, 0x1E,
	0x00, 0x28, 0xFB, 0xD1, 0x20, 0x46, 0xD6, 0xE7,
	0xF0, 0xB5, 0x02, 0x46, 0x0B, 0x46, 0x00, 0x20,
	0xB5, 0x4E, 0x15, 0x46, 0x00, 0x21, 0x13, 0xE0,
	0x6F, 0x5C, 0x3F, 0x02, 0x78, 0x40, 0x00, 0x24,
	0x0B, 0xE0, 0x01, 0x27, 0xFF, 0x03, 0x07, 0x40,
	0x00, 0x2F, 0x03, 0xD0, 0x47, 0x00, 0x77, 0x40,
	0xB8, 0xB2, 0x01, 0xE0, 0x47, 0x04, 0x38, 0x0C,
	0x64, 0x1C, 0x08, 0x2C, 0xF1, 0xDB, 0x49, 0x1C,
	0x99, 0x42, 0xE9, 0xDB, 0xF0, 0xBD, 0x08, 0xB5,
	0x00, 0x26, 0xFF, 0xE0, 0x00, 0xBF, 0xA7, 0x48,
	0x07, 0x68, 0x00, 0x2F, 0xFB, 0xD0, 0x00, 0x97,
	0x00, 0x20, 0xA4, 0x49, 0x08, 0x60, 0x00, 0x25,
	0xA3, 0x48, 0x00, 0x68, 0xFF, 0x21, 0x01, 0x31,
	0x88, 0x42, 0x03, 0xDD, 0x40, 0x20, 0xA1, 0x49,
	0x08, 0x60, 0xEB, 0xE0, 0x66, 0x20, 0x9F, 0x49,
	0x08, 0x60, 0x00, 0x98, 0x70, 0x28, 0x7D, 0xD0,
	0x06, 0xDC, 0x10, 0x28, 0x2A, 0xD0, 0x20, 0x28,
	0x4E, 0xD0, 0x60, 0x28, 0x77, 0xD1, 0x61, 0xE0,
	0x90, 0x28, 0x75, 0xD0, 0xB0, 0x28, 0x02, 0xD0,
	0xC0, 0x28, 0xF7, 0xD1, 0xBC, 0xE0, 0xFF, 0xF7,
	0x6E, 0xFF, 0x95, 0x48, 0x84, 0x68, 0x80, 0x14,
	0x84, 0x42, 0x03, 0xDD, 0x93, 0x48, 0x04, 0x60,
	0x01, 0x25, 0x12, 0xE0, 0x21, 0x1F, 0x01, 0x20,
	0x40, 0x07, 0xFF, 0xF7, 0xA5, 0xFF, 0x8F, 0x49,
	0x08, 0x60, 0x01, 0x20, 0x40, 0x07, 0x20, 0x18,
	0x80, 0x38, 0xC0, 0x6F, 0x48, 0x60, 0x08, 0x46,
	0x00, 0x68, 0x49, 0x68, 0x88, 0x42, 0x00, 0xD0,
	0x01, 0x25, 0xA4, 0xE0, 0x88, 0x48, 0x00, 0x68,
	0x01, 0x28, 0x0B, 0xD1, 0x00, 0x20, 0x86, 0x49,
	0x08, 0x60, 0xFF, 0xF7, 0x39, 0xFF, 0x00, 0x21,
	0xC9, 0x43, 0x7B, 0x48, 0xFF, 0xF7, 0x53, 0xFF,
	0xFF, 0xF7, 0x41, 0xFF, 0xFF, 0xF7, 0x30, 0xFF,
	0x00, 0x24, 0x08, 0xE0, 0xA0, 0x00, 0x7D, 0x4A,
	0x11, 0x58, 0x30, 0x46, 0xFF, 0xF7, 0x47, 0xFF,
	0x05, 0x43, 0x36, 0x1D, 0x64, 0x1C, 0x76, 0x48,
	0x00, 0x68, 0x84, 0x42, 0xF2, 0xDB, 0x77, 0x48,
	0x06, 0x60, 0xFF, 0xF7, 0x2C, 0xFF, 0x7E, 0xE0,
	0xFF, 0xF7, 0x1A, 0xFF, 0x00, 0x24, 0x08, 0xE0,
	0xA0, 0x00, 0x74, 0x4A, 0x11, 0x58, 0x30, 0x46,
	0xFF, 0xF7, 0x31, 0xFF, 0x05, 0x43, 0x36, 0x1D,
	0x64, 0x1C, 0x6B, 0x48, 0x00, 0x68, 0x84, 0x42,
	0xF2, 0xDB, 0x6E, 0x48, 0x06, 0x60, 0xFF, 0xF7,
	0x16, 0xFF, 0x68, 0xE0, 0xFF, 0xF7, 0x04, 0xFF,
	0x00, 0x24, 0x06, 0xE0, 0x00, 0x21, 0x30, 0x46,
	0xFF, 0xF7, 0x1D, 0xFF, 0x05, 0x43, 0x36, 0x1D,
	0x64, 0x1C, 0x01, 0x20, 0x40, 0x03, 0x84, 0x42,
	0xF4, 0xDB, 0xFF, 0xF7, 0x04, 0xFF, 0x00, 0x2D,
	0x04, 0xD1, 0x02, 0xE0, 0x03, 0xE0, 0x4F, 0xE0,
	0x1C, 0xE0, 0x00, 0x26, 0x4F, 0xE0, 0xFF, 0xF7,
	0xEB, 0xFE, 0x01, 0x26, 0xF6, 0x03, 0x00, 0x24,
	0x06, 0xE0, 0x00, 0x21, 0x30, 0x46, 0xFF, 0xF7,
	0x02, 0xFF, 0x05, 0x43, 0x36, 0x1D, 0x64, 0x1C,
	0xFF, 0x2C, 0xF6, 0xDD, 0x00, 0x21, 0xC9, 0x43,
	0x4D, 0x48, 0xFF, 0xF7, 0xF8, 0xFE, 0x05, 0x43,
	0xFF, 0xF7, 0xE5, 0xFE, 0x00, 0x2D, 0x00, 0xD1,
	0x00, 0x26, 0x34, 0xE0, 0xFF, 0xF7, 0xDF, 0xFE,
	0xC0, 0x20, 0x84, 0x68, 0x00, 0x2C, 0x01, 0xDA,
	0x01, 0x25, 0x19, 0xE0, 0x21, 0x20, 0x80, 0x02,
	0x84, 0x42, 0x01, 0xDD, 0x01, 0x25, 0x13, 0xE0,
	0xC8, 0x2C, 0x01, 0xDA, 0x01, 0x25, 0x0F, 0xE0,
	0x21, 0x1F, 0x00, 0x20, 0xFF, 0xF7, 0x10, 0xFF,
	0x44, 0x49, 0x08, 0x60, 0x20, 0x46, 0x80, 0x38,
	0xC0, 0x6F, 0x48, 0x60, 0x08, 0x46, 0x00, 0x68,
	0x49, 0x68, 0x88, 0x42, 0x00, 0xD0, 0x01, 0x25,
	0x00, 0x2D, 0x08, 0xD1, 0xFF, 0xF7, 0xAC, 0xFE,
	0x3F, 0x49, 0x35, 0x48, 0xFF, 0xF7, 0xC7, 0xFE,
	0x05, 0x43, 0xFF, 0xF7, 0xB4, 0xFE, 0x06, 0xE0,
	0x38, 0x48, 0x06, 0x68, 0x06, 0x60, 0x02, 0xE0,
	0x00, 0x25, 0xED, 0x43, 0x00, 0xBF, 0x00, 0xBF,
	0x00, 0x20, 0xC0, 0x43, 0x85, 0x42, 0x03, 0xD1,
	0x40, 0x20, 0x30, 0x49, 0x08, 0x60, 0x08, 0xE0,
	0x00, 0x2D, 0x03, 0xD0, 0xAA, 0x20, 0x2D, 0x49,
	0x08, 0x60, 0x02, 0xE0, 0x55, 0x20, 0x2B, 0x49,
	0x08, 0x60, 0x00, 0xBF, 0xFE, 0xE6, 0x2F, 0x48,
	0x2F, 0x49, 0x08, 0x60, 0x00, 0x20, 0x2F, 0x49,
	0x88, 0x60, 0x19, 0x20, 0xC0, 0x03, 0x2E, 0x49,
	0x48, 0x60, 0x00, 0x20, 0x2A, 0x49, 0x08, 0x60,
	0x70, 0x47, 0x00, 0x20, 0x2A, 0x4A, 0x80, 0x32,
	0x10, 0x62, 0x1B, 0x48, 0x38, 0x38, 0xC0, 0x6B,
	0x28, 0x4A, 0x90, 0x42, 0x13, 0xD1, 0x28, 0x48,
	0x28, 0x4A, 0xD0, 0x61, 0x00, 0x21, 0x07, 0xE0,
	0x15, 0x48, 0x78, 0x38, 0x08, 0x18, 0x00, 0x68,
	0x25, 0x4A, 0x8A, 0x18, 0x10, 0x60, 0x09, 0x1D,
	0x80, 0x29, 0xF5, 0xDB, 0x00, 0x20, 0x21, 0x4A,
	0xD0, 0x61, 0x01, 0x20, 0x70, 0x47, 0x00, 0x20,
	0xFC, 0xE7, 0xFF, 0x20, 0x01, 0x30, 0x1F, 0x49,
	0x08, 0x60, 0x0F, 0x49, 0x08, 0x60, 0x00, 0x20,
	0x0C, 0x49, 0x08, 0x60, 0x55, 0x20, 0x0D, 0x49,
	0x08, 0x60, 0x00, 0x20, 0x03, 0x49, 0x08, 0x60,
	0xFF, 0xF7, 0xCF, 0xFF, 0xFF, 0xF7, 0xBF, 0xFF,
	0xFF, 0xF7, 0xB9, 0xFE, 0x00, 0x08, 0x00, 0x20,
	0x00, 0x20, 0x01, 0x40, 0x78, 0x56, 0x00, 0x00,
	0xF8, 0x87, 0x00, 0x00, 0x50, 0xC3, 0x00, 0x00,
	0x21, 0x10, 0x00, 0x00, 0xF0, 0x17, 0x00, 0x20,
	0xF8, 0x17, 0x00, 0x20, 0xF4, 0x17, 0x00, 0x20,
	0xC0, 0x00, 0x00, 0x20, 0x00, 0x0F, 0x00, 0x20,
	0x04, 0x08, 0x00, 0x20, 0x00, 0x13, 0x00, 0x20,
	0x85, 0xE1, 0x24, 0x57, 0x51, 0xE5, 0xCC, 0x1A,
	0x00, 0x84, 0x00, 0x40, 0x00, 0x80, 0x00, 0x40,
	0x00, 0x00, 0x04, 0x40, 0x4E, 0x87, 0x55, 0x74,
	0x50, 0x12, 0x00, 0x00, 0x40, 0xE7, 0x00, 0x40,
	0x00, 0xF0, 0x00, 0x40, 0xFC, 0x17, 0x00, 0x20,
	0xFE, 0xE7, 0xFE, 0xE7, 0xFE, 0xE7, 0xFE, 0xE7,
	0xFE, 0xE7, 0xFE, 0xE7, 0x02, 0x48, 0x03, 0x49,
	0x03, 0x4A, 0x04, 0x4B, 0x70, 0x47, 0x00, 0x00,
	0x68, 0x08, 0x00, 0x20, 0x68, 0x0D, 0x00, 0x20,
	0x68, 0x09, 0x00, 0x20, 0x68, 0x09, 0x00, 0x20,
	0x70, 0x47, 0x70, 0x47, 0x70, 0x47, 0x70, 0x47,
	0x70, 0x47, 0x75, 0x46, 0x00, 0xF0, 0x24, 0xF8,
	0xAE, 0x46, 0x05, 0x00, 0x69, 0x46, 0x53, 0x46,
	0xC0, 0x08, 0xC0, 0x00, 0x85, 0x46, 0x18, 0xB0,
	0x20, 0xB5, 0xFF, 0xF7, 0xDF, 0xFF, 0x60, 0xBC,
	0x00, 0x27, 0x49, 0x08, 0xB6, 0x46, 0x00, 0x26,
	0xC0, 0xC5, 0xC0, 0xC5, 0xC0, 0xC5, 0xC0, 0xC5,
	0xC0, 0xC5, 0xC0, 0xC5, 0xC0, 0xC5, 0xC0, 0xC5,
	0x40, 0x3D, 0x49, 0x00, 0x8D, 0x46, 0x70, 0x47,
	0x10, 0xB5, 0x04, 0x46, 0xC0, 0x46, 0xC0, 0x46,
	0x20, 0x46, 0xFF, 0xF7, 0xD0, 0xFD, 0x10, 0xBD,
	0x00, 0x48, 0x70, 0x47, 0x08, 0x08, 0x00, 0x20,
	0x01, 0x49, 0x18, 0x20, 0xAB, 0xBE, 0xFE, 0xE7,
	0x26, 0x00, 0x02, 0x00, 0x70, 0x47, 0x00, 0x00,
	0x03, 0x49, 0x00, 0x20, 0x48, 0x60, 0x08, 0x60,
	0x02, 0x48, 0x80, 0x47, 0x02, 0x48, 0x00, 0x47,
	0x14, 0xE1, 0x00, 0x40, 0x6B, 0x05, 0x00, 0x20,
	0xCD, 0x00, 0x00, 0x20, 0x14, 0x06, 0x00, 0x20,
	0x00, 0x08, 0x00, 0x20, 0x08, 0x00, 0x00, 0x00,
	0x10, 0x01, 0x00, 0x20, 0x1C, 0x06, 0x00, 0x20,
	0x08, 0x08, 0x00, 0x20, 0xF8, 0x0F, 0x00, 0x00,
	0x2C, 0x01, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x00, 0x00, 0xC1, 0x2D, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

#endif
